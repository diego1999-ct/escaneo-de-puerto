import socket  # Importa la biblioteca socket para manejar conexiones de red (protocolo TCP/IP).
import sys  # Importa sys para manejar la salida en tiempo real usando stdout.

def scan_ports(target, start_port, end_port):
    # Nombre del archivo donde se guardarán los resultados.
    # Se reemplazan los puntos en la IP por guiones bajos para evitar errores en el nombre del archivo.
    filename = f"resultados_escaneo_{target.replace('.', '_')}.txt"

    # Abre el archivo en modo escritura ('w'). Si ya existe, lo sobrescribe.
    with open(filename, "w") as file:
        # Crea un mensaje inicial indicando el host y rango de puertos a escanear.
        mensaje_inicial = f"Escaneando {target} desde el puerto {start_port} hasta {end_port}...\n"

        # Imprime el mensaje en consola.
        print(mensaje_inicial)

        # Guarda el mismo mensaje en el archivo.
        file.write(mensaje_inicial)

        # Bucle para escanear desde el puerto de inicio hasta el de fin (inclusive).
        for port in range(start_port, end_port + 1):
            # Crea un socket TCP (SOCK_STREAM) con IPv4 (AF_INET).
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            # Establece un tiempo máximo de espera de 0.5 segundos para cada intento de conexión.
            sock.settimeout(0.5)

            # Intenta conectarse al puerto del host. Devuelve 0 si tiene éxito (puerto abierto).
            result = sock.connect_ex((target, port))

            # Muestra en consola en tiempo real el puerto que se está escaneando, sobreescribiendo la misma línea.
            sys.stdout.write(f"\rEscaneando puerto: {port}...")
            sys.stdout.flush()  # Fuerza la salida inmediata a la consola.

            # Si el resultado es 0, el puerto está abierto.
            if result == 0:
                # Crea un mensaje para mostrar y guardar en el archivo.
                mensaje_puerto = f"\n[+] Puerto {port} ABIERTO"

                # Imprime el mensaje en consola.
                print(mensaje_puerto)

                # Guarda el mensaje en el archivo de texto.
                file.write(mensaje_puerto + "\n")

            # Cierra el socket para liberar recursos del sistema.
            sock.close()

        # Mensaje final indicando que el escaneo ha terminado.
        mensaje_final = "\nEscaneo completado."

        # Imprime el mensaje en consola.
        print(mensaje_final)

        # Guarda el mensaje en el archivo.
        file.write(mensaje_final + "\n")

# Punto de entrada del programa. Se ejecuta si este archivo se ejecuta directamente.
if __name__ == "__main__":
    # Solicita al usuario que introduzca la IP o el dominio a escanear.
    target_host = input("Ingrese la IP o dominio a escanear: ")

    # Llama a la función scan_ports con los parámetros:
    # IP objetivo, puerto inicial (0), y puerto final (65535, que es el máximo permitido en TCP/UDP).
    scan_ports(target_host, 0, 65535)
